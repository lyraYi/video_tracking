# -*- coding: utf-8 -*-
import cv2
import numpy as np
import struct
import time
from scipy.ndimage import gaussian_filter
import matplotlib.pyplot as plt

##############################################################################
#                          CINE File Reading Functions                       #
##############################################################################

def read_L(f):
    return int(struct.unpack('<l', f.read(4))[0])

def read_Q(f):
    return struct.unpack('Q', f.read(8))[0]

def read_Q_array(f, n):
    a = np.zeros(n, dtype='Q')
    for i in range(n):
        a[i] = read_Q(f)
    return a

def read_B_2Darray(f, ypix, xpix):
    n = xpix * ypix
    a = np.array(struct.unpack(f'{n}B', f.read(n * 1)), dtype='B')
    return a.reshape(ypix, xpix)

def read_H_2Darray(f, ypix, xpix):
    n = xpix * ypix
    a = np.array(struct.unpack(f'{n}H', f.read(n * 2)), dtype='H')
    return a.reshape(ypix, xpix)

def read_cine(ifn):
    with open(ifn, 'rb') as cf:
        t_read = time.time()
        print("Reading .cine file...")

        cf.read(16)
        baseline_image = read_L(cf)
        image_count = read_L(cf)

        pointers = np.zeros(3, dtype='L')
        pointers[0] = read_L(cf)
        pointers[1] = read_L(cf)
        pointers[2] = read_L(cf)

        cf.seek(58)
        nbit = read_L(cf)

        cf.seek(int(pointers[0]) + 4)
        xpix = read_L(cf)
        ypix = read_L(cf)

        cf.seek(int(pointers[1]) + 768)
        pps = read_L(cf)
        exposure = read_L(cf)

        cf.seek(int(pointers[2]))
        pimage = read_Q_array(cf, image_count)

        dtype = 'B' if nbit == 8 else 'H'
        frame_arr = np.zeros((image_count, ypix, xpix), dtype=dtype)

        for i in range(image_count):
            p = struct.unpack('<l', struct.pack('<L', pimage[i] & 0xffffffffffffffff))[0]
            cf.seek(p)
            ofs = read_L(cf)
            cf.seek(p + ofs)
            frame_arr[i] = read_B_2Darray(cf, ypix, xpix) if nbit == 8 else read_H_2Darray(cf, ypix, xpix)

        time_arr = np.linspace(
            baseline_image / pps, 
            (baseline_image + image_count) / pps, 
            image_count, 
            endpoint=False
        )

        print("Done reading .cine file (%.1f s)" % (time.time() - t_read))
        return time_arr, frame_arr

##############################################################################
#                          Video Processing Functions                        #
##############################################################################

def convert_cine_to_avi(frame_arr, avi_path, scale_factor=8):
    """Convert CINE frame array to AVI video"""
    orig_height, orig_width = frame_arr.shape[1], frame_arr.shape[2]
    
    fourcc = cv2.VideoWriter_fourcc(*'MJPG')
    out = cv2.VideoWriter(avi_path, fourcc, 30, 
                        (orig_width*scale_factor, orig_height*scale_factor), False)

    print(f"Converting to {avi_path}...")
    for frame in frame_arr:
        norm_frame = cv2.normalize(frame, None, 0, 255, cv2.NORM_MINMAX)
        resized = cv2.resize(norm_frame.astype(np.uint8), 
                           (orig_width*scale_factor, orig_height*scale_factor))
        out.write(resized)
    
    out.release()
    print(f"Conversion complete. Saved to {avi_path}")

def track_object(avi_path, output_prefix, time_arr):
    """Main tracking function using CINE timing data"""
    cap = cv2.VideoCapture(avi_path)
    fps = int(cap.get(cv2.CAP_PROP_FPS))
    
    # Skip to 6 seconds
    start_frame = fps * 6
    cap.set(cv2.CAP_PROP_POS_FRAMES, start_frame)
    ret, initial_frame = cap.read()
    if not ret:
        print("Error: Couldn't read initial frame!")
        cap.release()
        return

    # Manual calibration
    cv2.imshow("Select Calibration Object", initial_frame)
    calib_roi = cv2.selectROI("Select Calibration Object", initial_frame, False)
    cv2.destroyAllWindows()
    calib_w, calib_h = calib_roi[2], calib_roi[3]
    real_length = float(input("Real-world length of selected object (meters): "))
    pixels_per_meter = max(calib_w, calib_h) / real_length

    # Tracking setup
    cv2.imshow("Select Object to Track", initial_frame)
    track_roi = cv2.selectROI("Select Object to Track", initial_frame, False)
    cv2.destroyAllWindows()
    x, y, w, h = track_roi
    template = initial_frame[y:y+h, x:x+w]
    template_gray = cv2.cvtColor(template, cv2.COLOR_BGR2GRAY)

    # Search area selection
    cv2.imshow("Select Search Area", initial_frame)
    range_roi = cv2.selectROI("Select Search Area", initial_frame, False)
    cv2.destroyAllWindows()
    range_x, range_y, range_w, range_h = range_roi

    # Tracking parameters
    composite = initial_frame.copy().astype(np.float32)
    alpha = 0.3
    current_pos = (x + w//2, y + h//2)
    frame_height, frame_width = initial_frame.shape[:2]
    center_x, center_y = frame_width // 2, frame_height // 2

    time_list, x_list, y_list = [], [], []
    frame_count = start_frame

    while cap.isOpened():
        ret, frame = cap.read()
        if not ret: 
            break

        current_frame_index = frame_count
        frame_count += 1

        display_frame = frame.copy()
        cv2.rectangle(display_frame, (range_x, range_y), 
                      (range_x + range_w, range_y + range_h), (255,0,0), 2)

        if (current_frame_index - start_frame) % 30 == 0:
            search_region = frame[range_y:range_y+range_h, range_x:range_x+range_w]
            res = cv2.matchTemplate(cv2.cvtColor(search_region, cv2.COLOR_BGR2GRAY),
                                   template_gray, cv2.TM_CCOEFF_NORMED)
            _, max_val, _, max_loc = cv2.minMaxLoc(res)
            
            if max_val > 0.7:
                match_x = range_x + max_loc[0] + w//2
                match_y = range_y + max_loc[1] + h//2
                current_pos = (match_x, match_y)
                
                # Store data with experimental time
                time_list.append(time_arr[current_frame_index])
                x_list.append((match_x - center_x)/pixels_per_meter)
                y_list.append((center_y - match_y)/pixels_per_meter)
                
                # Update composite
                x1 = max(0, match_x - w//2)
                y1 = max(0, match_y - h//2)
                x2 = min(frame_width, match_x + w//2)
                y2 = min(frame_height, match_y + h//2)
                composite[y1:y2, x1:x2] = cv2.addWeighted(
                    composite[y1:y2, x1:x2], 1-alpha,
                    frame[y1:y2, x1:x2].astype(np.float32), alpha, 0)

        # Draw tracking visualization
        cv2.circle(display_frame, current_pos, 10, (0,0,255), -1)
        cv2.imshow("Live Tracking", display_frame)
        cv2.imshow("Composite", composite.astype(np.uint8))
        if cv2.waitKey(30) & 0xFF == 27: 
            break

    cap.release()
    cv2.destroyAllWindows()
    cv2.imwrite(f"{output_prefix}_composite.png", composite.astype(np.uint8))

    # Convert to arrays and save
    time_array = np.array(time_list)
    x_array = np.array(x_list)
    y_array = np.array(y_list)

    np.savez(f"{output_prefix}_results.npz",
             time=time_array,
             x=x_array,
             y=y_array)
    
    # Generate plots
    plt.figure(figsize=(15,5))
    
    plt.subplot(131)
    plt.scatter(x_array, y_array, c=time_array, cmap='viridis')
    plt.colorbar(label='Experimental Time (s)')
    plt.xlabel('X Position (m)')
    plt.ylabel('Y Position (m)')
    plt.title('Object Trajectory')
    
    plt.subplot(132)
    plt.plot(time_array, x_array)
    plt.xlabel('Experimental Time (s)')
    plt.ylabel('X Position (m)')
    plt.title('X Position vs Time')
    
    plt.subplot(133)
    plt.plot(time_array, y_array)
    plt.xlabel('Experimental Time (s)')
    plt.ylabel('Y Position (m)')
    plt.title('Y Position vs Time')
    
    plt.tight_layout()
    plt.savefig(f"{output_prefix}_plots.png")
    plt.close()
    
    print(f"Processing complete for {avi_path}")

##############################################################################
#                              Main Execution                                #
##############################################################################

if __name__ == '__main__':
    # Process single file example
    cine_path = "Y20241101_He3kA_B250G500G_pl0t20_uw17t27_P24_y0@100_009.cine"
    avi_path = "output_video.avi"
    output_prefix = "tracking_results"
    
    # Read CINE file
    time_arr, frame_arr = read_cine(cine_path)
    
    # Convert CINE to AVI
    convert_cine_to_avi(frame_arr, avi_path)
    
    # Track object and save results
    track_object(avi_path, output_prefix, time_arr)
